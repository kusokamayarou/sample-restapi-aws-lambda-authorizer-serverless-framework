# Gitのcommitメッセージテンプレートを使ってcommit - あとらすの備忘録 https://kitigai.hatenablog.com/entry/2019/05/31/233000
# 【必須】Gitコミットの書き方・作法【prefix/emoji】 https://suwaru.tokyo/%E3%80%90%E5%BF%85%E9%A0%88%E3%80%91git%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%83%BB%E4%BD%9C%E6%B3%95%E3%80%90prefix-emoji%E3%80%91/


# ==== Format ====
# prefix: refs #管理番号 Subject
#
# Commit body...
# 
# 例 : docs: refs #1 pages 対応の為、.gitlab-ci.yml の不具合の修正。


# ==== Prefixes ====
# fix				バグ修正 ※クリティカルなバグ修正なら hotfix
# add feat			新規機能・新規ファイル追加 ※feat は feature の略
# update			バグではない機能修正
# change			仕様変更による機能修正
# clean refactor improve	整理 (リファクタリング等)
# disable			無効化 (コメントアウト等)
# remove delete			ファイル削除、コードの一部を取り除く
# rename			ファイル名の変更
# move				ファイル移動
# upgrade			バージョンアップ
# revert			修正取り消し
# docs				ドキュメントのみ修正
# style				空白、セミコロン、行、コーディングフォーマットなどの修正
# perf				性能向上する修正 ※perf は perfomance の略
# test				テスト追加や間違っていたテストの修正
# chore				ビルドツールやライブラリで自動生成されたものをコミットするとき
# ci/cd				CI/CDに関わる設定
# other				その他


# ==== Emojis ====
# 🎉  :tada:  機能追加（大きな）
# ✨  :sparkles:  機能追加（部分的）
# 👍  :+1:  機能改善・機能修正
# 🐛  :bug:  バグ修正
# ♻️  :recycle:  リファクタリング
# 🚿  :shower:  削除（機能・ファイル・コメント）
# ✅  :white_check_mark:  テスト・CI（追加・更新・改善）
# 📝  :memo:  ドキュメント・コメント（追加・更新）
# 👕  :shirt:  Lintエラー・コードスタイルの修正
# 🚀  :rocket:  パフォーマンス改善
# 🆙  :up:  依存パッケージなどのアップデート
# 🔒  :lock:  新機能の公開範囲の制限
# 👮  :cop:  セキュリティ関連の改善


# ==== The Seven Rules ====
# 1. 原則１行。 ( prefix: refs #管理番号 Subject )
# 2. 詳細を記載する場合は、２行目に空白行を追加し、３行目以降に記載。
# 
